name reka/api

description a nice API for reka

// meta {
  description this is the description
  nothing-else ok nice
}

use {
  http
  reka
  filesystem fs {
    dir /var/apps/reka/api-data/
  }
}

run http {

  http/router {

    GET / {
      put response {
        status 200
        content {
          message hello! there is nothing much to see here, you could try some of these URLs
          urls {
            list /apps
            show /apps/:appid
          }
        }
      }
    }

    GET /apps {
      reka/list response.content
    }

    GET /apps/:appid {
      reka/get response.content {
        app :appid
      }
    }
    
    GET /apps/:appid/flows/:flow*.:format {
      reka/visualize {
        app :appid
        flow :flow
        format :format
      }
    }
    
    POST /validate {
      run validate app
    }
    
    POST /apps {
      run deploy new app
    }

    named redeploy app {

      PUT /apps/:appid/redeploy {

        reka/redeploy :appid
        
        putvars response {
          status 200
          content {
            message :appid was redeployed!
          }
        }

      }

    }

    named undeploy app {
  
      DELETE /apps/:appid {
        
        reka/undeploy :appid

        putvars response {
          status 200
          content {
            message :appid was undeployed!
          }
        }

      }

    }

    within /files {
      run file handler
    }

  }
}

run file handler {

  http/router {

    GET /files/:path* {

      fs/type :path {

        when file {

          fs/read {
            filename :path
            download false
            out response.content
          }  

        }

        when dir {

          fs/list {
            dir :path
            out response.content
          }

        }

        when missing {

          put response {
            status 404
            content {
              message not found!
            }
          }

        }

      }

    }    

    POST /files/:path* {

      fs/write {
        filename :path
        data request.data.file.data
      }

      putvars response {
        status 200
        content {
          message thanks for the file!
          filename :path
          url /files/:path
        }
      }

    }

    DELETE /files/:path* {
      
      fs/rm {
        filename :path
      }

      putvars response {
        status 200
        content {
          status removed
          filename :path
        }
      }

    }

  }

}

flow deploy new app {
  copy {
    request.data.spec path
  }

  fs/type :path {

    when dir {
      put response {
        status 400
        content {
          message cannot deploy directories
        }
      }
    }

    when missing {
      put response {
        status 400
        content {
          message does not exist
        }
      }
    }

    when file {
      run deploy from path
    }

  }
}

flow deploy from path {
  
  fs/resolve {
    in :path
    out fullpath
  }

  reka/deploy {
    filename :fullpath
  }

  reka/get response.content.details {
    app :identity
  }

  putv response {
    status 200
    content {
      id :identity
      message :identity was deployed!
    }
  }
}

flow validate app {
  copy {
    request.data.spec path
  }

  fs/type :path {

    when dir {
      put response {
        status 400
        content {
          message cannot deploy directories
        }
      }
    }

    when missing {
      put response {
        status 400
        content {
          message does not exist
        }
      }
    }

    when file {
      run validate from path
    }

  }
}

flow validate from path {
  
  fs/resolve {
    in :path
    out fullpath
  }

  reka/validate {
  
    filename :fullpath
    
    when ok {
      putv response {
        status 200
        content {
          message ok :)
        }
      }
    }
    
    when error {
      println validation errors :errors (error is :error)
      
      putv response {
        status 400
        content {
          message not ok :(
        }
      }
      
      copy {
        error   response.content.message
        errors  response.content.errors
      }
      
    }
    
  }
  
}

flow redirect to https {
  http/redirect https://api.reka.io
}

trigger {
  http api.reka.io {
    run redirect to https
  }
  http api.reka.io {
    ssl {
      crt @include(reka.crt)
      key @include(reka.key)
    }
    run http
  }
}