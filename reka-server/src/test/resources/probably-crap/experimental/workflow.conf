
use {
	state
}

state/app application with unknown correctness {

	see if the config is valid {
	
		it is {
			state/app correctly configured application	
		}
		
		it's not {
			state/app application with configuration error
		}
	
	}

}

state/app application with configuration error {
	you can {
		post me a new version of it {
			state/app application with unknown correctness
		}
		just get rid of it
		maybe archive it or something 
	}
} 

state/app correctly configured application {
	you can {
		possibly give me a bit more config then deploy one! {
			create new entity (linked back to this app at this state) {
				relationship deployment-of
				state/deployment initial pre-initialized deployment		
			}
			
			@doc <<- markdown
				there is something here about it branching a bit of state off, represeting the deployment
				and keeping track of it all. so if I wish to have the saved application not be removable
				until the deployments are done, then this is how. the application itself may continue to have
				further states.
				
				## the other big thing is cyclic graphs
				
				currently the runtime graph stuff doesn't not permit cyclic graphs. state things normally do.
			---
		}
	}
}

state/deployment initial pre-initialized deployment {
	you can {
		initialize it {
			state/deployment initialized deployment dependencies
		}
		get rid of it
	}
}

state/deployment initialized deployment dependencies {
	then just move onto {
		start or bind application things
	}
}


















-----------------------

state get initial bits of data together {

	wait set issue priority
	
	wait assign staff member
	
	wait send customer brief initial email
	
	run {
		sms :id went into :state!	
	}
	
}

state ready to be worked on {
	
	run {
		
	}
	
}

state finished! {

	run {
		sms ticket :ticket-id was done! 
	}

}

export {
	sequence {
		- get initial bits of data together
		- ready to be worked on
		- finished!
	}
}


# ------

# now the actual app

use {
	
	ec/state-workflow ec
	
	twilio sms {
		id OIUJEFOISJ0948202
		key OIJOIJ08OIJOIJ
	}
	
}

# these are things we can replace

@ {

	@something {
		name nick
	}

}

run do some stuff {

	# this would dump "name nick" below
	@something 

	http/router {
		
		group updates {
			
			POST /update {
				
				@expand <<- js
				
					var config = require('config');
					
					var stuff = [
						{
							key: "prio",
							val: "set issue priority"
						},
						{
							key: "staff",
							val: "assign staff member"
						}
					];
					
					for (var o in stuff) {
						config.add('case/exists', ':request.data.' + o.val, function(exists) {
							exists.add('ec/action', o.val, function(action) {
								action.add(o.key, ':request.data.' + o.key);
							});
						});
					}
					
				---
				
				@expand {
				
					@data {
						prio set issue priority
						staff assign staff member
					}
					
					@each {
						case/exists :request.data.@key {
							ec/action @val {
								@key :request.data.@key
							}
						}
					}
					
				}
				
			}
			
			POST /set-priority {
				ec/action set issue priority {
					priority :request.data.prio	
				}
			}
			
			POST /assign-staff {
				ec/action assign staff member {
				
				}
			}
			
		}
		
	}


}

