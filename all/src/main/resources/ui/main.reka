name reka ui

mustache
jade
less

@env(REKA_ENV) production {
  http {
    listen ui.reka.io
    ssl {
      crt @include(reka.crt)
      key @include(reka.key)
    }
    on request {
      run main
    }
  }
  http _ {
    listen ui.reka.io
    on request {
      http/redirect https://ui.reka.io:{request.path}
    }
  }
  websockets ws {
    listen ui.reka.io
    ssl {
      crt @include(reka.crt)
      key @include(reka.key)
    }
  }
}

@env(REKA_ENV) !production {
  http {
    listen localhost:5051
    on request {
      run main
    }
  }
  http _ {
    listen localhost:5052
    on request {
      put:base http://localhost:5051
      http/redirect :{base}:{request.path}
    }
  }
  websockets ws {
    listen localhost:5051
  }
}

reka {
  on deploy {
    run broadcast app list
  }
  on undeploy {
    run broadcast app list
  }
  on status {
    run broadcast app list 
  }
}

def broadcast app list {
  put:message.id server
  reka/list message.apps
  ws/broadcast :message 
}

jsx {
  @each(**.jsx) {
    template @{path} @include(@{path})
  }
}

def main {

  http/router {

    group with layout {

      group react base pages {

        GET /
        GET /apps/:anything*

        run {
          mustache html.main <<- mustache
            <div id="main"></div>
          ---
        }
      }

      group content pages {

        @each(pages) {
          GET /@{filename} {
            @{extension} html.main @include(@{path})
          }
        }

      }

      run render layout
    }

    group api {

      GET /api/apps {
        reka/list response.content
      }

      DELETE /api/apps/:appid* {
        reka/undeploy :appid
        putv response.content {
          message destroyed :appid
        }
      }

      GET /api/apps/:appid*/flows/:flow*.:format {
        reka/visualize {
          app :appid
          flow :flow
          format :format
          stylesheet /assets/svg.css
        }
      }

    }

    otherwise {
      run serve assets
    }

  }
}

def serve assets {
  http/router {

    GET /assets/templates.js {
      jsx
      putv response {
        status 200
        headers {
          Content-Type application/javascript
        }
      }
    }

    GET /assets/all.css {
      less @include(less/less.reka)
      put:response.headers.Content-Type text/css
    }

    @each(assets) {
      GET /@{path} {
        http/content @include(@{path}) 
      }
    }
    
  }
}

def render layout {
  @include(assets.reka)
  mustache @include(layout.mustache)
}
