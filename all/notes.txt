ok, the problem is this:
- app is running successfully
- deploy new version with errors that won't run
- now we have incorrect code in app dir

possible solutions:
1. deploy into versioned dirs app/1 app/2 etc. and keep a few old ones around
	+ actually this is good. we can remove old one immediately on error. or delete new one.
	- takes up too much space. looks too messy on filesystem.
2. consider the app dir temporary and remove it after it has been deployed, keep the current (and optionally a few older) app archives
	- I like this one. makes it clear you cannot use files from deployment. 
3. deploy from a tmp dir then move into proper place when successful
	- this makes it look like you could keep an absolute filepath reference around but you couldn't. it would change.
	
	
ok I seem to be going with unpacking to versioned dirs. is it a good idea?
downsides:
	- more complicated logic to decide which apps to run on startup. why not just keep around the archives?
		well this allows you to actual use files from the deployment directly.
		
ah, the datadir needs to stay the same though :(
it's only the app dir that needs to have the versioned bit.	


========================

ok for the socket server thing. each application can be deployed with one or more ports.
each port can only be used for one application at a time.
for redeploys that a) are seamless (i.e. no incoming requests are lost) and b) seamless connections
(i.e. connections are persisted across redeploys) - optionally have them drop them on redeploy.

actually I want to unify HTTP/WEBSOCKET/SOCKET totally. as HTTP can be persistant connections anyway.
for doing long-poll stuff. it works like a normal socket connection....

=========== merge and forEachContent

at the moment MutableData::merge will use Data::forEachContent
the problem with this is that forEachContent skips over empty lists/maps/nulls
as it is only looking for actual content.

I kind of need another thing that does a proper merge.

I've kind of fudged it for now by letting listSet create sparse lists by setting indices above the length.