name reka lab

version 10.2

use {
	http
	admin reka
	mustache
	jade
	
	git {
	
		path /tmp/reka-repos
		
		initialize {
			git/init store
			git/init another-repo
		}
		
	}
	
	// git/repo store {
		path /tmp/reka-lab.git
	}
	
}

run web interface {

	http/router {
	
		group HTML content with layout {
			
			GET /who {
				+ html.main <<- markdown
			    
					## Who did this?
			    
			    	[Nick](http://nicksellen.co.uk) made it in between doing various other things.
			    
				---
			}
			
			GET /how {
				+ html.main <<- markdown
				
					## Well, it's a long story
					
					One for another day I think...
				
				---
			}
			
			run render layout
		}	
			
		group editor {
		
			GET /apps/new
			
			GET /apps/:appid/edit {
			
				store/get {
		  			path :appid
		  			out appconfig
		  		}
			}
			
			then {
				run render editor
			}
		
		}
		
		group running apps {
		
			GET / {
			
				reka/list
				
				+ html.sidebar <<- markdown
					### these are running applications
					
					<i class="fa fa-long-arrow-left"></i> they are alive!
					
					they are each made up of:
					
					- zero or more _dependencies_
					- one or more _flows_
					- one or more _triggers_ which trigger the flows
					
					#### dependencies
					
					these are similar _modules_ /  _libraries_ / _services_.
					
					they may be inert like a _library_ (e.g. `jade` template rendering)
					
					or active like a _service_ (e.g. `h2` database)
					
					#### flows
					
					these are the **meat** of the application.
					
					they represent a flow of execution, you can see that in the visualizations.
					
					the flows do nothing until they are triggered by something.
					
					#### triggers
					
					these initiate _flows_ to run
					
					they might be internal (e.g. a timer, using `every`)
					
					or start their own infrastructure for listening to the external world (e.g. `http`)
					
					
				---
				
				jade html.main <<- jade
					each app, id in apps
						section.app
							.row
								.medium-9.columns
									h1
										a(href="/#{id}")= app.name
									pre.appid= id
									ul.ports
										for port in app.ports
											li
												i.green.fa.fa-dot-circle-o
												span.port= port.port
												span.protocol= port.protocol
												
												unless empty(port.details)
													ul.details
														for value, name in port.details
															li
																span.name= name
																span.value= value
																
								.medium-3.columns
									.actions
										form.right(action="/#{id}", method='POST')
											input(type='hidden', name='_method', value='DELETE')
											button.tiny.alert(type='submit')
												i.fa.fa-trash-o
												| remove
				---
				
				run render layout
			}
			
			
			
			GET /:id {
			
				reka/get app {
					app :id
				}
				
				then {
				
					+ html.sidebar <<- markdown
					
						### this is one application
						
						it is currently **running**
						
						#### network
						
						shows you the network ports that are open for it
						
						additional information is shown too
						
						#### flows
						
						these are the _doing_ parts of the application
						
						they each represent a flow of execution 
						
						#### data
						
						this is just the data we hold about the application
						
					---
				
					jade html.main <<- jade
					
						.app-detail
						
							h1= app.name
							pre.appid= id
						
							section.detail	
								h2 network
								
								ul.ports
									for port in app.ports
										li
											i.green.fa.fa-dot-circle-o
											
											span.port= port.port
											span.protocol= port.protocol
											
											unless empty(port.details)
														
												ul.details
													for value, name in port.details
														li
															span.name= name
															span.value= value
												
												if port.protocol == 'http' && port.details.host != null
													url = port.protocol + '://' + port.details.host + ':' + port.port
													a.right(href=url, target='_blank')
														| visit&nbsp;
														strong= port.details.host
														| &nbsp;
														i.fa.fa-long-arrow-right
							
							section.detail
								h2 flows
								section.flows.row
									each flow in app.flows
										.flow(id="flow-#{flow}")
											h3= flow
											a(href="/#{id}/#{flow}")
												img.vis(src="/#{id}/#{flow}.svg")
									
								
							
							section.detail
								h2 data
								pre!= app
					---
				
					run render layout
				}
			}
			
			GET /:id/:flow.:format {
			
				reka/visualize {
					app :id
					flow :flow
					format :format
				}
				
			}
			
			GET /:id/:flow {
			
				reka/visualize {
					app :id
					flow :flow
					format svg
					out visualization
				}
				
				reka/get app {
					app :id
				}
				
				put extrastyles <<- text/html
				
					<style>
					
						.svg-container {
						  overflow: scroll;
						  position: fixed;
 						  top: 150px;
 						  left: 40px;
						  right: 40px;
						  bottom: 40px;
						  box-shadow: 0px 0px 12px -5px rgba(0,0,0,0.5);
						}
						
						ul.flow-list li a,
						ul.flow-list li .span {
						  display: block;
						  padding: 10px;
						}
						
						ul.flow-list li.active a {
						  background-color: #f0f0f0;
						}
						
						.svg-container .inner { 
						  margin: 0 auto;
						  text-align: center;
						  padding: 20px;
						}						
					
						svg {
						  aborder: 1px solid #999;
						  overflow: hidden;
						}
						
						text {
						  font-weight: 300;
						  font-family: "Helvetica Neue", Helvetica, Arial, sans-serf;
						  font-size: 11px;
						}
						
						g.node polygon {
						stroke-width: 0;
						fill: #CED5FF;
						}
						
						g.node:hover {
						  cursor: pointer;
						}
						
						g.node:hover polygon {
						fill: #BDC6FF;
						}
						
						g.cluster polygon {
						stroke-width: 1;
						stroke: #eee;
						}
						
						g.cluster > text {
						fill: #aaa;
						}
						
						g.edge:hover {
						cursor: pointer;
						}
						
						g.edge:hover path {
						stroke: #000;
						}
						
						.edge > text {
						fill: #888;
						}
						
						g.edge:hover text {
						fill: #000;
						}
						
						g.edge:hover polygon {
						fill: #000;
						stroke: #000;
						}
						
						g.node > ellipse {
						fill: #ddd;
						}
						
						g.node > ellipse + text {
						font-weight: 700;
						}
						
						g.node[id*="__EMBEDDED__"] polygon {
						fill: #555;
						}
						
						g.node[id*="__EMBEDDED__"] text {
						fill: #fff;
						}
						
						</style>
						
						<style>
						h1, h2 {
						  color: #333;
						}
						
						label {
						  margin-top: 1em;
						  display: block;
						}
						
						.error {
						  color: red;
						}
					</style>
						
					<script type="text/javascript">
						
						$(function(){
							$('g.node').click(function(e){
								console.log($(e.target).parents('g.node').first().attr('id'))
							});
						});
						
					</script>
					
				---
				
				put {
					layout wide
				}
			
				jade html.main <<- jade
				
					!= extrastyles
					
					ul.inline-list.flow-list
						each fl in app.flows
							li(id="flow-#{fl}", class=flow==fl ? 'active' : '')
								h3
									a(href="/#{id}/#{fl}")= fl
					
					.svg-container
						.inner!= visualization
					
				---	
				
				then render layout
			
			}
		
			DELETE /:id {
				reka/undeploy :id
				http/redirect /
			}
		}
		
		group saved apps {
		
			prefixed /peter {
			
				http/content <<- text/plain
					hello peter
				---
			
			}
		
			GET /apps {
			
				store/keys {
		  			path /
		  			out appids
		  		}
		  		
		  		+ no_apps_message <<- markdown
		  			
		  			### there are no apps :(
		  			
		  			why don't you [add one](/apps/new)?
		  			
		  		---
		  		
		  		jade html.main <<- jade
					if empty(appids)
						.panel.callout.noapps
							.row
								.medium-1.columns
									i.fa.fa-exclamation
								.medium-11.columns
									!= no_apps_message
						
					each appid in appids
						section.app
							.row
								.medium-9.columns
									h2= appid
									a(href="/apps/#{appid}.svg")
										img.vis(src="/apps/#{appid}.svg")
								.medium-3.columns
									.actions
											form.right(action="/apps/#{appid}/deploy", method='POST')
												button.tiny.success(type='submit')
													i.fa.fa-play
													| deploy
											a.tiny.button.right(href="/apps/#{appid}/edit")
												i.fa.fa-edit
												| edit
											form.right(action="/apps/#{appid}", method='POST')
												input(type='hidden', name='_method', value='DELETE')
												button.tiny.alert(type='submit')
													i.fa.fa-trash-o
													| delete
		  		---
		  		
		  		put html.sidebar <<- markdown
		  		
		  			### these are the applications available to you
		  			
		  			they are not _running_ yet
		  			
		  			pressing **deploy** will create a new deployment of that application
		  			
		  			once started, it'll appear in the [**running** section](/)
		  			
		  			you can start multiple instances of the same application, at the moment the HTTP ports will clash and you'll only see the most recently deployed one.
		  			
		  			in the future you'll be able to provide _deployment options_, such as the port to run on.
		  			
		  		---
		  		
		  		run render layout
		  		
			}
				
			POST /apps/:appid/deploy {
			
				store/get {
		  			path :appid
		  			out appconfig
		  		}
		  		
		  		reka/deploy {
		  			in appconfig
		  		}
		  		
		  		http/redirect /
				
			}
			
			DELETE /apps/:appid {
				store/delete {
					path :appid
				}
				http/redirect /apps
			}
			
			GET /apps/:appid.:format {
			
				store/get {
		  			path :appid
		  			out appconfig
		  		}
		  		
				reka/visualize {
					format :format
					in appconfig
				}
				
			}
			
			group save {
			
				PUT /apps/:appid
				
				POST /apps {
					uuid/generate :appid
				}
				
				then {
					
					store/put {
				        in request.data.config
				        path :appid
				    }
				 	
				 	http/redirect /apps   
				
				}
			
			}
			
		}
		
		group static assets {
		
			GET /js/ace-mode.js {
				http/content @import {
					from ace-mode-conf.js
					content-type application/javascript
				}
			}
		
			GET /css/app.css <<- text/css
			
				footer {
					margin-top: 200px;
				}
			
				.home.fa {
					font-size: 680px;
					color: #f5f5f5;
					position: fixed;
					top: 60px;
					z-index: -10;
				}
				
				.app img.vis {
					height: 160px;   
				}
				
				button i.fa, .button i.fa {
					padding-right: 1em;   
				}
	
				section.main {
					padding-top: 20px;
				}
				
				section.top-bar-section {
					font-size: 20px;
				}
				
				section.top-bar-section i {
					padding-right: 10px;									
				}
				
				form.config textarea {
					height: 500px;
				}
				
				.ace_config-k,
				.ace_config-kw {
					color: #f99 !important;
				}
				
				#config-editor {
					width: 100%;
					height: 100%;
				}
				
				/*
				#config-editor {
					position: fixed;
					top: 60px;
					bottom: 20px;
					left: 80px;
					right: 300px;
				}
				
				#config-editor-controls {
					position: fixed;
					right: 0;
					top: 45px;
					bottom: 0px;
					width: 260px;
					padding: 20px;
					background-color: #f5f5f5;
				}
				*/
				
				#config-editor-controls button,
				#config-editor-controls .button {
					width: 100%;   
				}
				
				.title-area .name i.fa {
					font-size: 60px;
					color: #fff;
					padding-top: 5px;
				}
				
				span.address {
					padding-left: 10px;
					color: #ccc;
				}
				
				section.app {
				  padding: 10px 20px;
 				  border-left: 10px solid #f5f5f5;
 				  margin: 20px 0;
 				   
				}
				
				section.app h1 {
				 margin-top: 0rem;
				 line-height: 1em;
				 margin-bottom: 1.2rem;
				}
				
				section.app form {
					margin-bottom: 0;
				}
				
				section.app:hover {
				  background-color: #f5f5f5;
				  background-color: #F1F4F9;
				  border-left-color: #D9E5F9;
				  /*cursor: pointer;*/
				}
				
				
	
				.ace_comment {
					color: #aaa !important;
				}
				
				.ace_doc_start,
				.ace_doc_end {
					color: #D2E7EE!important;
				}
				
				.ace_doc_type {
					color: #B5DBEE !important;
				}
				
				.ace_doc {
					color: #308AB2 !important;
				}
				
				.ace_val {
					color: #333 !important;
					background-color: #fffff5;
				}
				
				.ace_paren {
					color: #666 !important;
				}
				
				
				.title-area .name .first {
					padding-left: 5px;
					font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'source-code-pro', monospace;
				}
				
				.title-area span.name {
					position: relative;
					bottom: 24px;
					left: 5px;
				}
				
				.title-area span.name * {
					font-size: 22px;
				}
				
				.title-area span.name .second {
					color: #B5CAE3;
				}
				
				.top-bar,
				.top-bar-section ul li>a,
				.top-bar-section li a:not(.button) {
					background: #68b;
				}
				
				.top-bar-section li a:not(.button):hover {
					background: #526D96;
				}

				button, .button {
					background-color: #68b;
					border-color: #68b;
				}

				button:hover, 
				button:focus, 
				.button:hover, 
				.button:focus {
					background-color: #526D96;
				}								
								
								
				.top-bar-section ul li.active>a,
				.top-bar-section ul li.active>a:hover {
					background: #fff;
					color: #68b;
				}
				
				.actions > *,
				.actions .button,
				.actions button{
					width: 100%;   
				}
				
				.actions .button,
				.actions button {
					font-size: 1em;
					text-align: left;
					padding-left: 44px;
				}
				
				.actions .button i.fa,
				.actions button i.fa {
				    font-size: 1.5em;
				    padding-right: 0.5em;
				    position: absolute;
				    left: 14px;
				    top: 10px;
				}
				
				.row {
					max-width: none;
				}
				
				.panel {
					border-color: transparent !important;
				}
				
				.panel.callout {
					background-color: #fcf8e3;
				}
				
				.panel.callout .fa {
				    font-size: 5em;   
				    color: #DED08A;
				}
				
				body.editor section.main > .row > .columns {
				    position: fixed;
				    padding-top: 65px;
				    top: 0;
				    height: 100%;
				    z-index: -10;
				}
				
				body.editor section.main > .row > .main {
				    left: 0;
				}
				
				body.editor section.main > .row > .sidebar {
				    right: 0;
				}
				
				ul.ports {
		         list-style: none;
		         font-size: 1.2em;
		         margin: 0;
		         margin-top: 20px;
		        }
		        
		        ul.ports span.port {
		         color: #555;   
		        }
		        
		        ul.ports span.protocol {
		         padding-left: 10px;  
		         padding-right: 10px; 
		         color: #aaa;
		        }
		        
		        ul.ports i.fa.green {
				    padding-right: 0.5em;
				    color: green;
				}
				
				
				ul.ports span.port,
				ul.ports span.protocol,
				ul.ports ul.details {
				    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'source-code-pro', monospace;
				    afont-size: 0.9em;
				}
				
				ul.ports ul.details {
				 list-style: none;
				 display: inline;
				 margin: 0;
				 padding: 0;
				 padding-left: 0.5em;
				 padding-right: 1em;
				 font-size: 0.7em;
				}
				
				ul.ports ul.details li {
				    display: inline;   
				    margin: 0;
				    margin-left: 10px;
				}
				
				ul.ports ul.details .name {
				    color: #333;    
				    padding-right: 0.3em;
				}
								
				ul.ports ul.details .value {
				    padding-left: 0.3em;
				    padding: 3px 6px;
				 	background-color: #fcf8e3;
				 	color: #333;
				}
				
				section.app.flow {
				    /*border-left-color: #f5f5f5;*/
				    margin: 40px 0;
				    padding-left: 30px;
				}
				
				section.flow img.vis {
				    height: 220px;
				    margin-bottom: 20px;
				}
				
				
				section.detail {
				    border-top: 1px solid #ddd;
				    margin-top: 60px;
				    position: relative;
				    padding-top: 30px;
				}
				    			
				.app-detail h2 { 
				    position: absolute;
				    top: -36px;
				    background-color: #fff;
				    padding-right: 20px;
				}
								
								
				.app-detail h1 {
				 font-size: 4em;   
				}
				
				.flows > .flow {
				 float: left;
				 margin: 20px;
				 padding: 20px;
				 box-shadow: 0px 0px 12px -5px rgba(0,0,0,0.2);
				}
				
				.flows > .flow img.vis {
				  height: 200px;   
				  margin-top: 15px;
			      margin: 0 auto;
			      display: block;
				}
				
				section.detail {
				 clear: both;   
				}
				
			---
			
		}
	
	}

}

run render editor {

	 + {
		layout editor
	}

	mustache html.main <<- mustache
		<div id="config-editor">{{ appconfig }}</div>
	---
	
	mustache html.sidebar <<- mustache
	
		<div id="config-editor-controls" class="actions">
		
			{{#appid}}
				<form class="config" action="/apps/{{appid}}" method="POST" role="form">
					<input type="hidden" name="_method" value="PUT">
					<input class="config-content" type="hidden" name="config">
					<button class="success tiny" type="submit">
						<i class="fa fa-save"></i>
						update app
					</button>
				</form>		
			{{/appid}}
			
			{{^appid}}
				<form class="config" action="/apps" method="POST" role="form">
					<input class="config-content" type="hidden" name="config">
					<button class="success tiny" type="submit">
						<i class="fa fa-plus"></i>
						create app
					</button>
				</form>		
			{{/appid}}		
					
		</div>
		
		<script type="text/javascript">
			$(function(){
			
				var mode = 'ace/mode/flow';
			
				var form = $('form.config');
				var editorElement = document.getElementById('config-editor');
				editorElement.style.fontSize = '16px';
				
				var editor = ace.edit(editorElement);
				
				editor.getSession().setMode(mode);
				console.log('set mode to', mode);
				
				editor.setTheme("ace/theme/chrome");
				editor.getSession().setTabSize(2);
				editor.getSession().setUseSoftTabs(true);
				editor.renderer.setShowGutter(false); 
				
				var $contentElement = $('.config-content');
				
				form.submit(function(event){
					console.log('submitting form!');
					console.log('editor val is', editor.getValue());
					$contentElement.val(editor.getValue());
					console.log('set content thing to', $contentElement.val());
					return true;
				});
			});
		</script>
	---

	run render layout

}

run render layout {

	+ menu {
		
		running {
			icon fa-play
			title running
			path /
		}
		
		apps {
			icon fa-bars
			title available apps
			path /apps
		}
		
		new {
			icon fa-plus
			title new app
			path /apps/new
		}
		
	}
	
	+ utilmenu {
	
		how {
			icon fa-question
			title how does it work?
			path /how
		}
	
		who {
		  icon fa-male
		  title who made this?
		  path /who
		  
		}
	
	}

	jade <<- jade
		!!!
		html
			head
				meta(charset='utf-8')
				 
				link(rel='stylesheet', href='//cdn.jsdelivr.net/foundation/5.0.2/css/foundation.min.css')
				link(rel='stylesheet', href='//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css')
				link(rel='stylesheet', href='/css/app.css')
				
				script(type='text/javascript', src='//cdn.jsdelivr.net/foundation/5.0.2/js/jquery.js')
				
			body(class=empty(layout) ? '' : layout)
				nav.top-bar
					ul.title-area
						li.name
							h1
								a(href='/')
									i.fa.fa-cogs
									span.name
										span.first reka
										span.second lab
									
					section.top-bar-section
						ul
							each details, name in menu
								li(class=request.path == details.path ? 'active' : '')
									a(href=details.path)
										if details.icon != null
											i.fa(class=details.icon)
										= details.title
						ul.right
							each details, name in utilmenu
								li(class=request.path == details.path ? 'active' : '')
									a(href=details.path)
										if details.icon != null
											i.fa(class=details.icon)
										= details.title
										
				section.main
					.row
						if layout == 'wide'
							.medium-12.columns
								!= html.main	
						else	
							if empty(html.sidebar)
								.medium-8.medium-offset-1.columns
									!= html.main
							else
								.medium-7.medium-offset-1.columns.main
									!= html.main
								.medium-4.columns.sidebar
									.panel
										!= html.sidebar
				footer
				
				script(type='text/javascript', src='//cdn.jsdelivr.net/foundation/5.0.2/js/foundation.min.js')
				script(type='text/javascript', src='http://ace.c9.io/build/src-min/ace.js')
				script(type='text/javascript', src='/js/ace-mode.js')
	---
	
}

run api {

	reka/list response.content
	
	//log.debug apps :apps

	// + response.content {
		message I haven't really made this yet
	}

}

run yay {
	log.debug yay
}

trigger {
	
	http reka:5099 {
		run web interface
	}
	
	http api.reka:5099 {
		run api
	}
	
	git/http-server {
		post-receive {
			run yay
		}
	}
	
	// store/post-receive {
		run yay
	}
	
}